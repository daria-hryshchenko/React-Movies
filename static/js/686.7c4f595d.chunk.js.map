{"version":3,"file":"static/js/686.7c4f595d.chunk.js","mappings":"+SAEaA,EAAa,mCAAG,sGACJC,EAAAA,EAAAA,IACrB,4FAFyB,uBACnBC,EADmB,EACnBA,KADmB,kBAIpBA,GAJoB,2CAAH,qDAObC,EAAiB,mCAAG,WAAMC,GAAN,yFACRH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,6DADQ,uBACvBF,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,sDAOjBG,EAAe,mCAAG,WAAMD,GAAN,yFACNH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,qEADM,uBACrBF,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfI,EAAkB,mCAAG,WAAMF,GAAN,yFACTH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,4EADS,uBACxBF,EADwB,EACxBA,KADwB,kBAIzBA,GAJyB,2CAAH,sDAOlBK,EAAgB,mCAAG,WAAMC,GAAN,yFACPP,EAAAA,EAAAA,IAAA,6IACiHO,IAF1G,uBACtBN,EADsB,EACtBA,KADsB,kBAIvBA,EAAKO,SAJkB,2CAAH,qD,2JC5BhBC,EAAgBC,EAAAA,GAAAA,IAAH,oKASbC,EAAgBD,EAAAA,GAAAA,IAAH,qDAKbE,EAAaF,EAAAA,GAAAA,GAAH,wGAOVG,EAAaH,EAAAA,GAAAA,GAAH,sBAEVI,EAAcJ,EAAAA,GAAAA,GAAH,2CAIXK,EAAgBL,EAAAA,GAAAA,EAAH,sB,SCfX,SAASM,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACRL,GAAW,IACXhB,EAAAA,EAAAA,IAAmBmB,GAChBG,MAAK,SAAA1B,GACJkB,EAAWlB,EAAKO,QAEjB,IACAoB,OAAM,SAAAN,GAAK,OAAIC,EAASD,EAAMO,QAAnB,IACXC,QAAQT,GAAW,GACvB,GAAE,CAACG,KAGF,UAACb,EAAD,WACGO,EAAQa,OAAS,EAChBb,EAAQc,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAAqB,EAAZC,MAC9B,OACE,SAACvB,EAAD,WACE,UAACC,EAAD,YACE,UAACC,EAAD,sBAAsBmB,MACtB,SAAClB,EAAD,UAAgBmB,SAHHE,EAAAA,EAAAA,MAOpB,KAED,SAAC3B,EAAD,+CAEDW,IAAW,SAACiB,EAAA,EAAD,IACXf,IAAS,kEAA0CA,OAGzD,C,uDClDM,IAkBIc,EAAS,eAACE,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACvC,EAAIwC,GAWvD,OARExC,IAFFwC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["api/api.jsx","components/Elements/MovieReviews/MovieReview.styled.jsx","components/Elements/MovieReviews/MovieReviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nexport const requestMovies = async () => {\n  const { data } = await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/day?api_key=d40d4389e7b694736d94163c6dd7b0a1'\n  );\n  return data;\n};\n\nexport const requestMoviesById = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=d40d4389e7b694736d94163c6dd7b0a1&language=en-US`\n  );\n  return data;\n};\n\nexport const requestCastById = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=d40d4389e7b694736d94163c6dd7b0a1&language=en-US`\n  );\n  return data;\n};\n\nexport const requestReviewsById = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=d40d4389e7b694736d94163c6dd7b0a1&language=en-US&page=1`\n  );\n  return data;\n};\n\nexport const requestSeachById = async input => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=d40d4389e7b694736d94163c6dd7b0a1&language=en-US&page=1&include_adult=false&query=${input}`\n  );\n  return data.results;\n};\n","import styled from 'styled-components';\n\nexport const NoFilmMessage = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 26px;\n  margin: 20px 20px 100px;\n  font-weight: bold;\n`;\n\nexport const ReviewSection = styled.div`\n  margin: 0;\n  padding: 0;\n`;\n\nexport const ReviewList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  list-style: none;\n`;\n\nexport const ReviewItem = styled.li``;\n\nexport const ReviewTitle = styled.h3`\n  color: #1f85cf;\n`;\n\nexport const ReviewContent = styled.p``;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { nanoid } from 'nanoid';\nimport { requestReviewsById } from 'api/api';\nimport Loader from 'components/Elements/Loader/Loader';\nimport {\n  NoFilmMessage,\n  ReviewSection,\n  ReviewList,\n  ReviewItem,\n  ReviewTitle,\n  ReviewContent,\n} from './MovieReview.styled';\n\nexport default function MovieReviews() {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    requestReviewsById(movieId)\n      .then(data => {\n        setReviews(data.results);\n        // console.log(data.results);\n      })\n      .catch(error => setError(error.message))\n      .finally(setLoading(false));\n  }, [movieId]);\n\n  return (\n    <ReviewSection>\n      {reviews.length > 0 ? (\n        reviews.map(({ author, content, index }) => {\n          return (\n            <ReviewList key={nanoid()}>\n              <ReviewItem>\n                <ReviewTitle>Author: {author}</ReviewTitle>\n                <ReviewContent>{content}</ReviewContent>\n              </ReviewItem>\n            </ReviewList>\n          );\n        })\n      ) : (\n        <NoFilmMessage>There is no reviews on this film</NoFilmMessage>\n      )}\n      {loading && <Loader />}\n      {error && <div>Oops, some error occured... Message:{error}</div>}\n    </ReviewSection>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["requestMovies","axios","data","requestMoviesById","id","requestCastById","requestReviewsById","requestSeachById","input","results","NoFilmMessage","styled","ReviewSection","ReviewList","ReviewItem","ReviewTitle","ReviewContent","MovieReviews","useState","reviews","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","then","catch","message","finally","length","map","author","content","index","nanoid","Loader","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}