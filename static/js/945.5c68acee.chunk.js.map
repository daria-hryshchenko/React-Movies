{"version":3,"file":"static/js/945.5c68acee.chunk.js","mappings":"+SAEaA,EAAa,mCAAG,sGACJC,EAAAA,EAAAA,IACrB,4FAFyB,uBACnBC,EADmB,EACnBA,KADmB,kBAIpBA,GAJoB,2CAAH,qDAObC,EAAiB,mCAAG,WAAMC,GAAN,yFACRH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,6DADQ,uBACvBF,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,sDAOjBG,EAAe,mCAAG,WAAMD,GAAN,yFACNH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,qEADM,uBACrBF,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfI,EAAkB,mCAAG,WAAMF,GAAN,yFACTH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,4EADS,uBACxBF,EADwB,EACxBA,KADwB,kBAIzBA,GAJyB,2CAAH,sDAOlBK,EAAgB,mCAAG,WAAMC,GAAN,yFACPP,EAAAA,EAAAA,IAAA,6IACiHO,IAF1G,uBACtBN,EADsB,EACtBA,KADsB,kBAIvBA,EAAKO,SAJkB,2CAAH,qD,2JC5BhBC,EAAcC,EAAAA,GAAAA,IAAH,qDAKXC,EAAWD,EAAAA,GAAAA,GAAH,wGAORE,EAAWF,EAAAA,GAAAA,GAAH,sBAERG,EAAWH,EAAAA,GAAAA,GAAH,2CAIRI,EAAgBJ,EAAAA,GAAAA,EAAH,6CAIbK,EAAgBL,EAAAA,GAAAA,IAAH,oK,SCVX,SAASM,IACtB,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACRL,GAAW,IACXjB,EAAAA,EAAAA,IAAgBoB,GACbG,MAAK,SAAA1B,GACJkB,EAAalB,EAAK2B,KAEnB,IACAC,OAAM,SAAAP,GAAK,OAAIC,EAASD,EAAMQ,QAAnB,IACXC,QAAQV,GAAW,GACvB,GAAE,CAACG,KAGF,UAACf,EAAD,WACGS,EAAUc,OAAS,EAClBd,EAAUe,KAAI,YAA+C,IAA5CC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,KAAkB,EAAZC,MAC9C,OACE,SAAC1B,EAAD,WACE,UAACC,EAAD,WACoB,OAAjBuB,GACC,gBACEG,IAAG,yCAAoCH,GACvCI,IAAG,gBAAWH,MAGhB,gBACEE,IAAI,4JACJC,IAAI,SACJC,MAAM,SAGV,SAAC3B,EAAD,UAAWuB,KACX,UAACtB,EAAD,yBAA2BoB,UAfhBO,EAAAA,EAAAA,MAmBlB,KAED,SAAC1B,EAAD,8DAKDK,IAAW,SAACsB,EAAA,EAAD,IACXpB,IAAS,kEAA0CA,OAGzD,C,uDCjEM,IAkBImB,EAAS,eAACE,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC5C,EAAI6C,GAWvD,OARE7C,IAFF6C,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["api/api.jsx","components/Elements/MovieCast/MovieCast.styled.jsx","components/Elements/MovieCast/MovieCast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nexport const requestMovies = async () => {\n  const { data } = await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/day?api_key=d40d4389e7b694736d94163c6dd7b0a1'\n  );\n  return data;\n};\n\nexport const requestMoviesById = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=d40d4389e7b694736d94163c6dd7b0a1&language=en-US`\n  );\n  return data;\n};\n\nexport const requestCastById = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=d40d4389e7b694736d94163c6dd7b0a1&language=en-US`\n  );\n  return data;\n};\n\nexport const requestReviewsById = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=d40d4389e7b694736d94163c6dd7b0a1&language=en-US&page=1`\n  );\n  return data;\n};\n\nexport const requestSeachById = async input => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=d40d4389e7b694736d94163c6dd7b0a1&language=en-US&page=1&include_adult=false&query=${input}`\n  );\n  return data.results;\n};\n","import styled from 'styled-components';\n\nexport const CastSection = styled.div`\n  margin: 0;\n  padding: 0;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  list-style: none;\n`;\n\nexport const CastItem = styled.li``;\n\nexport const CastName = styled.h3`\n  color: #1f85cf;\n`;\n\nexport const CastCharacter = styled.p`\n  font-weight: 500;\n`;\n\nexport const NoCastMessage = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 26px;\n  margin: 20px 20px 100px;\n  font-weight: bold;\n`;\n","import { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useParams } from 'react-router';\nimport { requestCastById } from 'api/api';\nimport Loader from 'components/Elements/Loader/Loader';\nimport {\n  CastSection,\n  CastList,\n  CastItem,\n  CastName,\n  CastCharacter,\n  NoCastMessage,\n} from './MovieCast.styled';\n\nexport default function MovieCast() {\n  const [movieCast, setMovieCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    requestCastById(movieId)\n      .then(data => {\n        setMovieCast(data.cast);\n        // console.log(data.cast);\n      })\n      .catch(error => setError(error.message))\n      .finally(setLoading(false));\n  }, [movieId]);\n\n  return (\n    <CastSection>\n      {movieCast.length > 0 ? (\n        movieCast.map(({ character, profile_path, name, index }) => {\n          return (\n            <CastList key={nanoid()}>\n              <CastItem>\n                {profile_path !== null ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                    alt={`Actor ${name}`}\n                  />\n                ) : (\n                  <img\n                    src=\"https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg\"\n                    alt=\"no img\"\n                    width=\"200\"\n                  />\n                )}\n                <CastName>{name}</CastName>\n                <CastCharacter>Character: {character}</CastCharacter>\n              </CastItem>\n            </CastList>\n          );\n        })\n      ) : (\n        <NoCastMessage>\n          We have no information about cast in this movie\n        </NoCastMessage>\n      )}\n\n      {loading && <Loader />}\n      {error && <div>Oops, some error occured... Message:{error}</div>}\n    </CastSection>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["requestMovies","axios","data","requestMoviesById","id","requestCastById","requestReviewsById","requestSeachById","input","results","CastSection","styled","CastList","CastItem","CastName","CastCharacter","NoCastMessage","MovieCast","useState","movieCast","setMovieCast","loading","setLoading","error","setError","movieId","useParams","useEffect","then","cast","catch","message","finally","length","map","character","profile_path","name","index","src","alt","width","nanoid","Loader","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}